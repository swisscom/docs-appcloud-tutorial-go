---
title: Run the App Locally
owner: Konstantinos Karampogias
---

<strong><%= modified_date %></strong>

Now start your application locally
Given that Docker is installed on your system, you can run the web app locally exactly as it would run in the cloud.

Firstly we build the binary in the ELF 64-bit LSB format:

<pre class="terminal">
$ GOARCH=amd64 GOOS=linux go build -ldflags "-X main.buildstamp=`date '+%Y-%m-%d_%H:%M:%S'` -X main.githash=`git rev-parse HEAD`" -o ./bin/gocf
</pre>

Secondly we run the binary in a Docker container:

<pre class="terminal">
$ docker run -v $GOPATH/src/github.com/swisscom/cf-sample-app-go/bin:/opt/bin  --env-file ./cf.env -p 4000:4000  -it cloudfoundry/cflinuxfs2 /opt/bin/gocf
2016/04/22 12:56:51 Listening at 4000
</pre>

The `cf.env` file is used to mock the exact ENVs variables that the binary will have available when we execute it in the cloud. In that way we ensure that a local run is identical to a cloud run.

Open <a href="http://localhost:4000" target="_blank">http://localhost:4000</a> in your web browser. You should see your app running locally.

Alternatively you can open the app using a the command line:

<pre class="terminal">
$ curl http://localhost:4000/
hello swisscom cloud!
</pre>

_For Windows or OS X systems, you'll have to use the Docker Machine IP._

To stop the app from running locally, in the CLI, press `Ctrl+C` to exit.

Secondly we inspect the `manifest.yml` file located at top level dir of the project.

You can change all of the attributes listed in this file, if necessary.
Important here is the `path` attribute because it indicates what will be uploaded to the cloud, everything within that folder. In our case there is only a binary which was built manually. Also the `host` should change accordingly, it has to be globally unique so be creative because will be part of the URL that your app can be reached at.


<div style="text-align:center;margin:3em;">
  <a href="./push-changes.html" class="btn btn-primary">I can run my App locally</a>
</div>
