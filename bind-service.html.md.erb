---
title: Bind a Service to Your App
owner: Tobias Fuhrimann
---

<strong><%= modified_date %></strong>

The <a href="../service-offerings/index.html" target="_blank">service marketplace</a> has a large number of data stores, from Redis and MongoDB, to MariaDB (fork of MySQL) and RabbitMQ. You can run `cf marketplace` to get an overview. In this step you will add a small MariaDB database to your app.

Create the database:

<pre class="terminal">
$ cf create-service mariadb small mydb
Creating service instance my-db in org MyOrg / space MySpace as user@mydomain.com...
OK

Create in progress. Use 'cf services' or 'cf service my-db' to check operation status.

Attention: The plan `small` of service `mariadb` is not free.  The instance `mydb` will incur a cost.  Contact your administrator if you think this is in error.
</pre>

This creates a small MariaDB database for you which we now have to bind to our application. Binding means that the credentials and URL of the service will be written dynamically into the environment variables of the app as `VCAP_SERVICES` and can hence be used directly from there.

Let's bind the new service to our existing application:

<pre class="terminal">
$ cf bind-service my-go-app mymyd
Binding service my-mongodb to app my-go-app in org MyOrg / space MySpace as user@mydomain.com...
OK
TIP: Use 'cf restage my-go-app' to ensure your env variable changes take effect
</pre>

<p class="note">
  <strong>Note</strong>: If you are getting <code>Server error, status code: 409</code>, please try again after a couple of minutes. It takes a while to spin up that MongoDB for you.
</p>

After that we restage the application as suggested so that it includes the new credentials in its environment variables:

<pre class="terminal">
$ cf restage my-go-app
Restaging app my-app in org MyOrg / space MySpace as user@mydomain.com...
-----> Downloaded app package (8.0K)
-------> Buildpack version 1.5.8
-----> Creating runtime environment

...
</pre>

Now we want to consume our new Mariadb from within our application. We use the following example code

<pre class="terminal">
package main

import (
    "database/sql"
    "fmt"
    "log"
    "net/http"
    "net/url"
    "os"

    cfenv "github.com/cloudfoundry-community/go-cfenv"
    _ "github.com/go-sql-driver/mysql"
)

var (
    buildstamp string
    githash    string
)

func main() {
    log.SetOutput(os.Stdout)
    var port string
    if port = os.Getenv("PORT"); len(port) == 0 {
        port = "4000"
    }

    cStr := getConnectionStr("mydb")
    log.Printf("Connect str %s ", cStr)
    db, err := sql.Open("mysql", cStr)
    if err != nil {
        log.Fatal("Can not open DB:", err)
    }
    defer db.Close()

    var version string
    db.QueryRow("SELECT VERSION()").Scan(&version)
    log.Printf("Connected to :%s\n", version)

    if err := db.Ping(); err != nil {
        log.Fatal("DB Error Ping", err.Error())
    }

    http.HandleFunc("/", defaultHandler)
    log.Printf(fmt.Sprintf("Listening at %s", port))
    if err := http.ListenAndServe(":"+port, nil); err != nil {
        log.Fatal("ListenAndServe:", err)
    }

}
func getConnectionStr(n string) string {
      appEnv, err := cfenv.Current()
      if err != nil {
          log.Fatal("hr")
      }
      mysqlService, err := appEnv.Services.WithName(n)
      if err != nil {
          log.Fatal(err)
      }
      uri, ok := mysqlService.Credentials["uri"].(string)
      if !ok {
          log.Fatal("No valid MariabDB uri\n")
      }
      u, err := url.Parse(uri)
      if err != nil {
          log.Fatal("No valid MariabDB uri\n")
      }
      return fmt.Sprintf("%s@tcp(%s)%s", u.User.String(), u.Host, u.Path)
  }

func defaultHandler(w http.ResponseWriter, req *http.Request) {
  fmt.Fprintln(w, "hello Swisscom cloud!")
}

</pre>


...

<pre class="terminal">
$ cf push my-go-app
...
$ cf logs my-go-app --recent
...
2016-05-25T14:04:00.97+0200 [APP/0]      OUT 2016/05/25 12:04:00 Connect str XXXXX:YYYYY@tcp(10.0.Z.Y:3306)/CF_FFFFFFFFFFF
2016-05-25T14:04:00.97+0200 [APP/0]      OUT 2016/05/25 12:04:00 Connected to :5.5.42-MariaDB-wsrep
2016-05-25T14:04:00.97+0200 [APP/0]      OUT 2016/05/25 12:04:00 Listening at 8080
...
</pre>

You can access other services like Redis or Mongodb in a similar matter, simply by binding them to your app and accessing them through the environment variables.

<div style="text-align:center;padding:3em;">
  <a href="./manifest.html" class="btn btn-primary">I've bound a service to my App</a>
</div>
