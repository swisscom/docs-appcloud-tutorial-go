---
title: Define Environment Variables
owner: Konstantinos Karampogias
---

<strong><%= modified_date %></strong>

<%= vars.product_short %> lets you externalize configuration - storing data such as encryption keys or external resource addresses in <a href="../devguide/deploy-apps/environment-variable.html" target="_blank">environment variables</a>.

At runtime, environment variables are exposed to the application through its environment. You can use these for example to run Node.js in production mode setting the `NODE_ENV` environment variable.

<pre class="terminal">
$ cf set-env go-demo-app  APP_MODE production
Setting env variable 'NODE_ENV' to 'production' for app my-node-app in org MyOrg / space MySpace as user@smydomain.com...
OK
TIP: Use 'cf restage' to ensure your env variable changes take effect
</pre>

Then restage your app as suggested using

<pre class="terminal">
$ cf restage go-demo-app
Restaging app my-node-app in org MyOrg / space MySpace as user@mydomain.com...
-----> Downloaded app package (8.0K)
-----> Downloaded app buildpack cache (2.3M)
-------> Buildpack version 1.5.8

...
</pre>

Verify the ENV

<pre class="terminal">
--$ curl -s  go-demo-app.scapp.io/info|grep APP_MODE
APP_MODE=production
</pre>

More information on https://golang.org/pkg/os/#Getenv

<div style="text-align:center;margin:3em;">
  <a href="./bind-service.html" class="btn btn-primary">I've set my environment variable</a>
</div>
