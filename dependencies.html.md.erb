---
title: Declare App Dependencies
owner: Tobias Fuhrimann
---

<strong><%= modified_date %></strong>

<%= vars.product_short %> recognizes an app as Go (among other possible reasons) by the existence of a `glide.yaml` file in the root directory. For your own apps, you can create one by running `glide init`.

The demo app you deployed already has a `glide.yaml`, and it looks something like this:

```yaml
package: github.com/swisscom/cf-sample-app-go
import: []
```

When an app is deployed, <%= vars.product_short %> reads this file and installs the appropriate dependencies using the `glide install` command.

Run this command in your local directory to install the dependencies, preparing your system for running the app locally:

<pre class="terminal">
$ glide install
[INFO]  Lock file (glide.lock) does not exist. Performing update.
[INFO]  Downloading dependencies. Please wait...
[INFO]  No references set.

...
</pre>

As you can see, there are no dependencies to install for our sample app so we can just run it. The command did, however, create a `glide.lock` file. It is good practice to push this to the cloud as well since it specifies which versions of dependencies to install exactly.

Upon running `cf push`, we will also push our whole dependencies folder `vendor`. Since Cloud Foundry runs `glide install` anyways, this is redundant and should be omitted to save bandwidth and even more importantly: time. You can create a `.cfignore` file which works just like a `.gitignore` file and which tells Cloud Foundry what files should be excluded when pushing. Let's create a `.cfignore` file and exclude the `vendor` folder:

```txt
vendor
```

<div style="text-align:center;margin:3em;">
  <a href="./run-locally.html" class="btn btn-primary">I've installed the App dependencies locally</a>
</div>
